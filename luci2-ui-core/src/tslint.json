{
  "extends": [
    "tslint-eslint-rules",
    "tslint-consistent-codestyle"
  ],
  "rulesDirectory": [
    "node_modules/codelyzer"
  ],
  "rules": {
    "arrow-return-shorthand": true,
    "callable-types": true,
    "class-name": true,
    "comment-format": [true, "check-space"],
    "curly": false,
    "eofline": true,
    "forin": true,
    "import-blacklist": [true, "rxjs","rxjs/Rx"],
    "import-spacing": true,
    "indent": [true, "spaces", 2],
    "interface-over-type-literal": true,
    "label-position": true,
    "max-line-length": [true, 130],
    "member-access": false,
    "member-ordering": [true, {
      "order": "fields-first"
    }],
    "no-arg": true,
    "no-bitwise": true,
    "no-console": [true,
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace"
    ],
    "no-construct": true,
    "no-debugger": true,
    "no-duplicate-super": true,
    "no-duplicate-variable": true,
    "no-empty": false,
    "no-empty-interface": true,
    "no-eval": true,
    "no-inferrable-types": [true, "ignore-params"],
    "no-internal-module": true,
    "no-misused-new": true,
    "no-non-null-assertion": true,
    "no-shadowed-variable": true,
    "no-string-literal": false,
    "no-string-throw": true,
    "no-switch-case-fall-through": true,
    "no-trailing-whitespace": true,
    "no-invalid-this": [true, "check-function-in-method"],
    "no-unnecessary-initializer": true,
    "no-unused-expression": true,
    "no-unused-variable": true,
    "no-use-before-declare": true,
    "no-var-keyword": true,
    "object-literal-sort-keys": false,
    "one-line": [
      true,
      "check-open-brace",
      "check-catch",
      "check-else",
      "check-whitespace"
    ],
    "prefer-const": true,
    "quotemark": [true, "single"],
    "radix": true,
    "semicolon": [
      true,
      "always",
      "ignore-interfaces"
    ],
    "triple-equals": [
      true,
      "allow-null-check"
    ],
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      }
    ],
    "typeof-compare": true,
    "unified-signatures": true,
    "variable-name": [
      true,
      "ban-keywords",
      "check-format",
      "allow-leading-underscore"
    ],
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-separator",
      "check-type"
    ],
    // codelyser rules
    // [ENABLED, "attribute" | "element", "selectorPrefix" | ["listOfPrefixes"], "camelCase" | "kebab-case"]
    "directive-selector": [
      true,
      "attribute",
      "app",
      "camelCase"
    ],
    "component-selector": [
      true,
      "element", [
        "app", "wdg", "uci"
      ],
      "kebab-case"
    ],
    "use-input-property-decorator": true,
    "use-output-property-decorator": true,
    "use-host-property-decorator": true,
    "no-attribute-parameter-decorator": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "no-forward-ref": true,
    "use-life-cycle-interface": true,
    "use-pipe-transform-interface": true,
    "component-class-suffix": true,
    "directive-class-suffix": true,
    "no-access-missing-member": true,
    "templates-use-public": true,
    "invoke-injectable": true,


    //tslint-eslint-rules
    "no-duplicate-case": true,
    "no-extra-semi": true,
    "no-invalid-regexp": true,
    "ter-no-irregular-whitespace": true,
    "valid-typeof": true,
    "ter-func-call-spacing": [true],

    "ter-indent": [true, 2,
      {
        "SwitchCase": true,
        "VariableDeclarator": true,
        "outerIIFEBody": 0,
        "MemberExpression": 1,
        "FunctionDeclaration": {
          "parameters": "first",
          "body": 1
        },
        "FunctionExpression": {
          "parameters": "first",
          "body": 1
        },
        "CallExpression": {
          "arguments": "first"
        },
        "ArrayExpression": 1,
        "ObjectExpression": 1
      }
    ],

    // tslint-consistent-codestyle
    "naming-convention": [
      true,
      // forbid leading and trailing underscores and enforce camelCase on EVERY name. will be overridden by subtypes if needed
      {
        "type": "default",
        "format": "camelCase",
        "leadingUnderscore": "forbid",
        "trailingUnderscore": "forbid"
      },
      // require all global constants to be camelCase or UPPER_CASE
      // all other variables and functions still need to be camelCase
      {
        "type": "variable",
        "modifiers": ["global", "const"],
        "format": ["camelCase", "UPPER_CASE"]
      },
      // override the above format option for exported constants to allow only UPPER_CASE
      {
        "type": "variable",
        "modifiers": ["export", "const"],
        "format": "UPPER_CASE"
      },
      // allow leading underscores for parameters, because `tsc --noUnusedParameters` will not flag underscore prefixed parameters
      // all other rules (trailingUnderscore: forbid, format: camelCase) still apply
      // since we don't want to inherit this config to `parameterProperties`, we set `final = true`
      {
        "type": "parameter",
        "leadingUnderscore": "allow",
        "final": true
      },
      // require leading underscores for private properties and methods, all other rules still apply
      {
        "type": "member",
        "modifiers": "private",
        "leadingUnderscore": "require"
      },
      // same for protected
      {
        "type": "member",
        "modifiers": "protected",
        "leadingUnderscore": "require"
      },
      // exclicitly disable the format check only for method toJSON
      {
        "type": "method",
        "filter": "^toJSON$",
        "format": null
      },
      // enforce UPPER_CASE for all public static readonly(!) properties
      {
        "type": "property",
        "modifiers": ["public", "static", "const"],
        "format": "UPPER_CASE"
      },
      // enforce PascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed.
      {
        "type": "type",
        "format": "PascalCase"
      },
      // abstract classes must have the prefix "Abstract". The following part of the name must be valid PascalCase
      {
        "type": "class",
        "modifiers": "abstract",
        "prefix": "Abstract"
      },
      // interface names must start with "I". The following part of the name must be valid PascalCase
      {
        "type": "interface",
        "prefix": "I"
      },
      // generic type parameters must start with "T"
      // most of the time it will only be T, which is totally valid, because an empty string conforms to the PascalCase check
      // By convention T, U and V are used for generics. You could enforce that with "regex": "^[TUV]$" and if you are care that much for performance, you could disable every other check by setting a falsy value
      {
        "type": "genericTypeParameter",
        "prefix": "T"
      },
      // enum members must be in PascalCase. Without this config, enumMember would inherit UPPER_CASE from public static const property
      {
        "type": "enumMember",
        "format": "PascalCase"
      }
    ],
    "no-static-this": true,
    "no-unnecessary-else": true
  }
}

{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "type": "object",
  "title": "Basic System configurations",
  "description": "Settings that apply to the most basic operation of the system, such as the hostname, the time zone, and how and where to write logging information to",
  "properties": {
    "system": {
      "title": "",
      "description": "General System options",
      "type": "object",
      "anonymous": true,
      "properties": {
        "hostname": {
          "title": "Hostname for this system",
          "description": "Avoid points, even if they are within quotes. For example ' my.hostname ' will show only the ' my ' part",
          "type": "string",
          "format": "hostname",
          "default": "lede",
          "required": true
        },
        "timezone": {
          "title": "Time Zone",
          "description": "The time zone that date and time should be rendered in by default.",
          "type": "string",
          "default": "UTC"
        },
        "zonename": {
          "title": "Time zone name for zoneinfo",
          "description": "Only useful when using glibc and zoneinfo! (LIBC_USE_EGLIBC, PACKAGE_zoneinfo-*) The time zone that date and time should be rendered in by default.",
          "type": "string",
          "examples": [
            "Europe/Brussels"
          ]
        },
        "type": "object",
        "properties": {
          "buffersize": {
            "title": "Buffersize",
            "description": "Size of the kernel message buffer",
            "type": "integer"
          },
          "conloglevel": {
            "title": "Console log level",
            "description": "Number between 1-8. The maximum log level for kernel messages to be logged to the console. Only messages with a level lower than this will be printed to the console. Higher level messages have lower log level number. Highest level messages are ones with log level 0. If you want more verbous messages in console put conloglevel to 8 if you want less messages lower conloglevel to 4 or even less.",
            "type": "integer",
            "minimum": 1,
            "maximum": 8,
            "default": 7
          },
          "cronloglevel": {
            "title": "Cron log level",
            "description": "The minimul level for cron messages to be logged to syslog. 0 will print all debug messages, 8 will log command executions, and 9 or higher will only log error messages.",
            "type": "integer",
            "default": 5,
            "minimum": 0
          },
          "klogconloglevel": {
            "title": "Console Kernel log level",
            "description": "The maximum log level for kernel messages to be logged to the console. Only messages with a level lower than this will be printed to the console. Identical to 'Console log level' and will override it.",
            "type": "integer",
            "default": 7
          },
          "log_buffer_size": {
            "title": "System log buffer size [kB]",
            "description": "Size of the log buffer of the new procd based system log, that is output by the logread command.",
            "type": "integer",
            "minimum": 0,
            "default": 16
          },
          "log_file": {
            "title": "Log file",
            "description": "File to write log messages to (type file). The default is to not write a log in a file.",
            "examples": [
              "/var/log/messages"
            ],
            "type": "string",
            "format": "path"
          },
          "log_ip": {
            "title": "Remote Syslog Server IP",
            "description": "IP address of a syslog server to which the log messages should be sent in addition to the local destination.",
            "type": "string",
            "format": "ipv4"
          },
          "log_port": {
            "title": "Remote Port",
            "description": "Port number of the remote Syslog Server",
            "type": "integer",
            "default": 514,
            "minimum": 1,
            "maximum": 65535
          },
          "log_prefix": {
            "title": "Log prefix (remote)",
            "description": "Adds a prefix to all log messages send over network",
            "type": "string"
          },
          "log_proto": {
            "title": "Protocol",
            "description": "Sets the protocol to use for the connection",
            "type": "string",
            "enum": [
              "tcp",
              "udp"
            ],
            "default": "udp"
          },
          "log_remote": {
            "title": "Enable remote logging",
            "type": "boolean",
            "default": true
          },
          "log_size": {
            "title": "Log size [kB]",
            "description": "Size of the file or circular memory buffer in KiB.",
            "type": "integer",
            "default": 16,
            "minimum": 0
          },
          "log_trailer_null": {
            "title": "Trailer null",
            "description": "Use \\0 instead of \\n as trailer when using TCP.",
            "type": "boolean",
            "default": false
          },
          "log_type": {
            "title": "Log type",
            "description": "Either circular or file.",
            "type": "string",
            "enum": [
              "circular",
              "file"
            ],
            "default": "circular"
          }
        }
      }
    },
    "timeserver": {
      "type": "object",
      "properties": {
        "enabled": {
          "title": "Enable Client",
          "type": "boolean"
        },
        "enable_server": {
          "title": "Enable Server",
          "description": "Enables the time server on this device, ntpd will answer with the time of the router. (busybox-ntpd listens to UDP 123 by default)",
          "type": "boolean",
          "default": false
        },
        "server": {
          "title": "NTP Servers",
          "description": "Pool of NTP servers to poll the time from. If empty, ntpd disables client mode, and system time won't be set automatically.",
          "type": "array",
          "items": {
            "type": "string",
            "format": "hostname"
          },
          "dependencies": [
            "enabled"
          ]
        }
      }
    },
    "led": {
      "type": "object",
      "properties": {
        "name": {
          "title": "Led name",
          "description": "",
          "type": "string"
        },
        "sysfs": {
          "title": "Sysfs entry",
          "description": "Entry of the led in the /sys/class/leds directory",
          "type": "string",
          "format": "path",
          "enumBinding": [
            "luci2.system",
            "led_list",
            {},
            "$.leds[*].name"
          ],
          "required": true
        },
        "default": {
          "title": "Default state",
          "description": "LED state before trigger",
          "type": "boolean",
          "enum": ["1", "0"]
        },
        "trigger": {
          "title": "Trigger",
          "description": "Event that controls the led activation",
          "type": "string",
          "enumBinding": [
            "luci2.system",
            "led_list",
            {},
            "$.leds[?(@.name=='${sysfs}')].triggers[*]"
          ]
        },
        "delayon": {
          "title": "Delay ON",
          "description": "How long (ms) the LED should be on",
          "type": "integer",
          "required": true,
          "minimum": 0,
          "dependencies": { "trigger": ["timer"]}
        },
        "delayoff": {
          "title": "Delay OFF",
          "description": "How long (ms) the LED should be off",
          "type": "integer",
          "required": true,
          "minimum": 0,
          "dependencies": { "trigger": ["timer"]}
        },
        "dev": {
          "title": "Device",
          "description": "Name of the network/usb device which status should be reflected",
          "type": "string",
          "required": true,
          "dependencies": { "trigger": ["netdev", "usbdev", "morse"]},
          "enumBinding": ["luci2.network", "device_list", {}, "$.devices[*].device"]
        },
        "mode": {
          "title": "Mode",
          "description": "One or more of link, tx, or rx, seperated by spaces",
          "type": "string",
          "required": true,
          "enum": ["link", "tx", "rx"],
          "dependencies": { "trigger": ["netdev"]}
        },
        "interval": {
          "title": "Interval",
          "description": "Interval in ms when device is active",
          "type": "integer",
          "required": true,
          "minimum": 0,
          "dependencies": { "trigger": ["usbdev"]}
        },
        "delay": {
          "title": "Delay",
          "description": "Dit length in milliseconds",
          "type": "integer",
          "minimum": 0,
          "dependencies": { "trigger": ["morse"]}
        },
        "message": {
          "title": "Message",
          "description": "The message to signal",
          "type": "string",
          "dependencies": { "trigger": ["morse"]}
        }
      }
    }
  }
}

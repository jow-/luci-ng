{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "type": "object",
  "title": "Basic System configurations",
  "description": "Settings that apply to the most basic operation of the system, such as the hostname, the time zone, and how and where to write logging information to",
  "properties": {
    "@system": {
      "title": "",
      "description": "General System options",
      "type": "array",
      "items": {
        "type": "object",
        "anonymous": true,
        "ui": {
          "fieldsets": {
            "default": 4,
            "sets": [
              {
                "title": "General",
                "fields": ["hostname", "timezone", "zonename"]
              },
              {
                "title": "Log",
                "fields": ["log_buffer_size", "conloglevel", "buffersize"]
              },
              {
                "title": "File Logging",
                "fields": ["log_file", "log_size"]
              },

              {
                "title": "Remote Logging",
                "fields": [
                  "log_remote",
                  "log_ip",
                  "log_port",
                  "log_proto",
                  "log_hostname",
                  "log_trailer_null",
                  "log_prefix"
                ]
              },
              { "title": "Other" }
            ]
          }
        },
        "properties": {
          "hostname": {
            "title": "Hostname for this system",
            "description": "",
            "type": "string",
            "format": "hostname",
            "default": "OpenWrt",
            "required": true
          },
          "timezone": {
            "title": "Time Zone",
            "description": "The time zone that date and time should be rendered in by default.",
            "type": "string",
            "default": "UTC"
          },
          "zonename": {
            "title": "Time zone name for zoneinfo",
            "description": "Only useful when using glibc and zoneinfo (overrides timezone).",
            "type": "string",
            "examples": ["Europe/Brussels"]
          },
          "buffersize": {
            "title": "Kernel log Buffersize",
            "description": "Size of the kernel message buffer",
            "type": "integer"
          },
          "conloglevel": {
            "title": "Kernel log level",
            "description": "Maximum log level for kernel messages to be logged to the console.",
            "type": "integer",
            "minimum": 1,
            "maximum": 8,
            "default": 7
          },
          "cronloglevel": {
            "title": "Cron log level",
            "description": "Combination of bit flags. 1: log start of job, 2: log end of job, 4: log failed jobs, 8: log pid of all jobs.",
            "type": "integer",
            "default": 5,
            "minimum": 0,
            "maximum": 15
          },
          "log_buffer_size": {
            "title": "System log buffer size [kB]",
            "description": "Use log_size if no set.",
            "type": "integer",
            "minimum": 0,
            "default": 64
          },
          "log_file": {
            "title": "Log file",
            "description": "File to write log messages to (type file). The default is to not write a log in a file.",
            "examples": ["/var/log/messages"],
            "type": "string",
            "format": "path"
          },
          "log_ip": {
            "title": "Remote Syslog Server IP",
            "description": "Log messages to server in addition to the local destination.",
            "type": "string",
            "format": "ipv4"
          },
          "log_port": {
            "title": "Remote Port",
            "description": "Port number of the remote Syslog Server",
            "type": "integer",
            "default": 514,
            "minimum": 1,
            "maximum": 65535
          },
          "log_prefix": {
            "title": "Log prefix (remote)",
            "description": "Adds a prefix to all log messages send over network",
            "type": "string"
          },
          "log_proto": {
            "title": "Protocol",
            "description": "Sets the protocol to use for the connection",
            "type": "string",
            "enum": ["tcp", "udp"],
            "default": "udp"
          },
          "log_remote": {
            "title": "Enable remote logging",
            "type": "boolean",
            "default": true
          },
          "log_size": {
            "title": "Log size [kB]",
            "description": "Size of the file or circular memory buffer in KiB.",
            "type": "integer",
            "default": 16,
            "minimum": 0
          },
          "log_trailer_null": {
            "title": "Trailer null",
            "description": "Use \\0 instead of \\n as trailer when using TCP.",
            "type": "boolean",
            "default": false
          },
          "log_type": {
            "title": "Log type",
            "description": "Either circular or file.",
            "type": "string",
            "enum": ["circular", "file"],
            "default": "circular"
          },
          "log_hostname": {
            "title": "Hostname for log",
            "type": "string",
            "format": "host"
          }
        }
      }
    },
    "@timeserver": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "enabled": {
            "title": "Enabled",
            "type": "boolean",
            "default": true
          },
          "enable_server": {
            "title": "Enable Server",
            "description": "Busybox-ntpd server will answer with the time of the router (it listens to UDP 123).",
            "type": "boolean",
            "default": false,
            "depends=": "$model.enabled"
          },
          "server": {
            "title": "NTP Servers",
            "description": "Pool of NTP servers to poll the time from. If empty, ntpd disables client mode, and system time won't be set automatically.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "hostname"
            },
            "depends=": "$model.enabled"
          }
        }
      }
    },
    "@led": {
      "type": "array",
      "ui": {
        "onInit": "leds = ubus('luci2.system','led_list').leds"
      },

      "items": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Led name",
            "description": "",
            "type": "string"
          },
          "sysfs": {
            "title": "Sysfs entry",
            "description": "Entry of the led in the /sys/class/leds directory",
            "type": "string",
            "format": "path",
            "enum=": "jsonPath(leds, '$[*].name')",
            "required": true
          },
          "default": {
            "title": "Default state",
            "description": "LED state before trigger",
            "type": "boolean"
          },
          "trigger": {
            "title": "Trigger",
            "description": "Event that controls the led activation",
            "type": "string",
            "enum=": "jsonPath(leds, `$[?(@.name=='${$model.sysfs}')].triggers[*]`)",
            "default": "none"
          },
          "delayon": {
            "title": "Delay ON",
            "description": "How long (ms) the LED should be on",
            "type": "integer",
            "required": true,
            "minimum": 0,
            "depends=": "$model.trigger === 'timer'"
          },
          "delayoff": {
            "title": "Delay OFF",
            "description": "How long (ms) the LED should be off",
            "type": "integer",
            "required": true,
            "minimum": 0,
            "depends=": "$model.trigger === 'timer'"
          },
          "dev": {
            "title": "Device",
            "description": "Name of the network/usb device which status should be reflected",
            "type": "string",
            "required": true,
            "depends=": "['netdev', 'usbdev', 'morse'].indexOf($model.trigger)>=0",
            "enum=": "ubus('luci2.network', 'device_list', '$.devices[*].device')"
          },
          "mode": {
            "title": "Mode",
            "description": "One or more of link, tx, or rx, seperated by spaces",
            "type": "string",
            "required": true,
            "enum": ["link", "tx", "rx"],
            "depends=": "$model.trigger === 'netdev'",
            "default": "link"
          },
          "interval": {
            "title": "Interval",
            "description": "Interval in ms when device is active",
            "type": "integer",
            "required": true,
            "minimum": 0,
            "depends=": "$model.trigger === 'usbdev'",
            "default": 50
          },
          "delay": {
            "title": "Delay",
            "description": "Dit length in milliseconds",
            "type": "integer",
            "minimum": 0,
            "depends=": "$model.trigger === 'morse'",
            "default": 150
          },
          "message": {
            "title": "Message",
            "description": "The message to signal",
            "type": "string",
            "depends=": "$model.trigger === 'morse'"
          },
          "gpio": {
            "title": "GPIO",
            "type": "integer",
            "default": 0,
            "depends=": "$model.trigger === 'gpio'"
          },
          "inverted": {
            "title": "Inverted",
            "type": "boolean",
            "depends=": "$model.trigger === 'gpio'"
          }
        }
      }
    }
  }
}
